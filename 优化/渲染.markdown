# 浏览器渲染
* 用户看到页面分为两个阶段
    1. 页面内容加载完成DOMContentLoaded
    2. 页面资源加载完成load
* 浏览器渲染分为五个步骤
    1. DOM树 
    2. CSSOM 
    3. render树
    4. layout(布局)
    5. paint() 绘制

* 解析html文档过程
    解析是一行一行的读取html代码,包括script标签,所以在构建过程中可能被css和js加载而阻塞.  (display:none和script标签也会在dom树中)

* 减小阻塞
    1. script标签位于body标签底部，减少First Paint(解析并显示部分内容)时间，可以尽快的减少白屏事件，但是不会较少DOMContentLoaded被触发的事件
    2. 在script标签上增加属性defer或者async
        1. defer: 异步下载js文件不会影响后续DOM渲染，脚本会在DOM渲染完毕后，DOMContentLoaded事件调用前执行，脚本按顺序执行。
        （适用于依赖DOM元素的脚本比如评论框。）
        2. async:使脚本异步的加载并在允许的情况下执行，不影响DOMContentLoaded事件的调用，先加载完的脚本先执行。
        （适用于不关心DOM元素的脚本。）
    3. css样式放在head中,尽快解析CSS保证更快的First Paint，CSSOM完毕之前页面一直处于白屏状态。  
    4. css和js都会造成阻塞,  dom和cssom会结合形成render树,但是在优化时,为什么css要放在顶部呢,(其实现代浏览器为了更好的用户体验,渲染引擎将尝试尽快在屏幕上显示的内容。它不会等到所有HTML解析之前开始构建和布局渲染树。部分的内容将被解析并显示。也就是说浏览器能够渲染不完整的dom树和cssom，尽快的减少白屏的时间。)

## 回流和重绘
[回流和重绘](https://www.cnblogs.com/Peng2014/p/4687218.html)
1. 回流reflow
浏览器布局发生变化需要重新渲染,这个回退的过程叫做回流,从html的根节点rootframe开始递归往下.  
* 优化
    * 异步reflow或者增量异步reflow,浏览器积攒到足够数量的变化后再做一次reflow.
    * 引起reflow:
        1. 页面第一次渲染
        2. DOM树发生变化
        3. Render树变化
        4. 获取元素的某些属性
        5. 元素CSS设置display:none;
* 下面情况会导致reflow发生
    1. 改变窗口大小
    2. 改变文字大小
    3. 内容的改变，如用户在输入框中敲字
    4. 激活伪类，如:hover
    5. 操作class属性
    6. 脚本操作DOM
    7. 计算offsetWidth和offsetHeight
    8. 设置style属性

* 重绘repaint
当改变某个元素的背景色,文字颜色,边框颜色等不影响周围或者内部布局的属性的时候,屏幕一部分需要重画但是布局没发生变化.
(减少reflow、repaint触发次数)

1. 用transform做形变和位移可以减少reflow  
避免逐个修改节点样式，尽量一次性修改
2. 使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染
3. 可以将需要多次修改的DOM元素设置display:none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘）
4. 避免多次读取某些属性
5. 通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本

## 优化渲染效率
1. 样式文件在head标签中,脚本文件在body结束前 ,防止渲染阻塞
2. 简化并优化css选择器
3. dom多个操作放在一起
4. 不一条一条的改变样式,而是通过改变class一次性改变样式.
5. 先将元素设为display:none(需要一次重排和重绘),然后对这个节点进行100次操作,最后再恢复显示(需要一次重排和重绘).这样,就可以用两次重新渲染,取代了100次的重新渲染.

## 优化性能
1. 减少http请求数量


