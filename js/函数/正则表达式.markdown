# 正则表达式
* 正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个字符串是否含有某种子串、将匹配的子串做替换或者从某个字符串中取出符合某个条件的子串等。  
如何让在代码中让字符串多行显示: 在每行尾加 \n 或者加个 + 号

* 有两种表达方式
    1. var reg = /abcd/i;
    2. var reg = RegExp("abcd","m");
*   
    var reg1 = RegExp(reg); // reg1和reg指向的是同一个地址
    var reg1 = new RegExp(reg);//这里reg1和reg只是内容一样,但是指向两个不同的地址
* 匹配方式
    1. i:匹配时不区分大小写.(ignoreCase)
    2. g:全局匹配,找出所有符合条件的结果(global)
    3. m: 多行匹配 : (multiline)
    ```js
    var reg=/^a/gm;//寻找以a开头的a
    var str="avdgd\nafdf"; // 转移字符\n使字符串变成了两行,因为有m这个多行匹配的属性,所以两个a都会被匹配出来
    ```
* 正向先行断言
(?=pattern) 正向先行断言
代表字符串中的一个位置，紧接该位置之后的字符序列能够匹配pattern。
例如对”a regular expression”这个字符串，要想匹配regular中的re，但不能匹配expression中的re，可以用”re(?=gular)”，该表达式限定了re右边的位置，这个位置之后是gular，但并不消耗gular这些字符，将表达式改为”re(?=gular).”，将会匹配reg，元字符.匹配了g，括号这一砣匹配了e和g之间的位置。






* []表示一位,可以填能够取到的范围
    1. [1-9],[A-z]
    2. [^a] 表示当前为不是a 
* (abc|bcd)   |表示或,表示可以选中abc或者bcd
* /\w/g    \w === [0-9A-z_]   \W 表示\w的补集
* \d  === [0-9] 
* \s  查到空白字符  ===[\t\n\r\v\f]
* \b 是单词边界  /B 非单词边界
* \t 制表符 匹配的是真实存在的\t    不能识别" "
* . 除了换行符之外的任何单词   \. 是.
* n+ 表示出现1个以上  abc 匹配 \w+ 的结果是 abc;
* n* 表示0个以上   abc 匹配 \w*  'abc','';
* n? 0或者1个   aaaa 匹配 a 的结果是 'a','a','a','a','';
* n{x} 表示匹配x个
* n{x,y} 表示x到y个 根据贪婪匹配原则,能匹配连续的y个就匹配连续的y个
* n{x,} 表示x到正无穷.
* $  结尾 例如 /ed$/g  以ed结尾
* ^  开头   

```js

var reg =   (^[0]\.([5-9]\d?)$)     |   
          ( ( 0 | ([^0]\d{0,2}) | (^[1-4][0-9]{2})) (\.\d{1,2})?$)|(^500$)
var reg = /\w*/g;
var str = "abc";
str.match(reg); // {"abc",""}; 两个元素,因为全局匹配,在匹配abc过后,还有个"";空字符串
//贪婪匹配原则,尽可能的匹配多个连续的字符
var reg1 = /\d*/g
str.match(reg); // {"","","",""}//四个空元素, 因为abc有四个空,a的前面,a的后面,b的后面,c的后面.

```
## reg方法
* test()只能返回true或者false
* match() 能返回匹配的结果.是一个数组.
* exec()  通过console.log可以输出详细信息,输出一个数组,
    ```js
        var str = "ababab";
        reg = /ab/g
        console.log(reg.exec(str));//结果是 ["ab",index:0,input:"ababab"];
        console.log(reg.exec(str));//结果里index变成1,
        console.log(reg.exec(str));//结果里index变成2,
        console.log(reg.exec(str));//结果里index变成0,
        // 如果没有加g(全局匹配),则只会匹配一个,也就是index一直是0
    ````
* 如果匹配若干个连续相同的字符.
```js
    var str = "aaaa";
    reg = /(\w)\1\1\1/g //  ()表示一个子表达式, 可以用\1反向引用第一个子表达式, \2 表示引用第二个子表达式 依次类推
    str.match(reg) ;//结果是"aaaa"
    str = aaaabbbbb; 
    str.match(reg);//结果是"aaaa","bbbb"
    //匹配aabb形式的字符串
    str = "aabb";
    reg1 = /(\w)\1(\w)\2/g;
    reg.match("aabb");//结果是"aabb";
    console.log(str1.exec(reg1));//["aabb","a","b",index:0,input:"aabb"]
```
* search()  
* split() 会按匹配的内容把字符串截开
* replace()  
```js
var str ='aa';
str.replace("a","b");结果是"ba";//没有访问全局的能力,只能找出一个a
//如果使用正则表达式并加g,可以全局匹配

//把aabb变成bbaa
var reg = /(\w)\1(\w)\2/g;
var str = "aabb";
console.log(str.replace(reg,"$2$2$1$1"));
```
* 把the-first-name变成小驼峰theFirstName
```js
    var reg = /-(\w)/g;
    var str = "the-first-name";
    console.log(str.repalce(reg,function($,$1){
        return $1.toUpperCase();
    }));
```
* 找出后面带有b的a  
```js
 var str = 'abaaa';
 reg = /a(?=b)/g  // ?!b表示非b
```
* 贪婪匹配原则,尽可能的匹配多个连续的字符.
比如字符串是aaaaaa, reg = /a*/  匹配结果是aaaaaa  
如果是非贪婪匹配 reg=/a+?/g  (加问号表示非贪婪匹配)
,则是,a,a,a,a,a,a

