
### 原型
* 定义： 原型是function对象的一个属性，定义了构造函数制造出的
对象 的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。
* 特点
* prototype :   每个函数都有,指向函数的原型对象
* _proto_ :  每个对象都有,指向该对象的原型.
* constructor:  每个原型都有,指向关联的构造函数
```js
    //Person.prototype 
    Person.prototype = {
        constructor:Person;
        __proto__:Object
    }（可以将Person中相同的属性提取到prototype中)
    function Person(){
    }
    var person = new Person();    
```
```js
    Person.prototype.name = 'li';
    var person = new Person();
    console.log('person.name');//li
    Person.prototype = { 
        name:"wang";
    } 
    //这里Person.prototype 指向了另一个对象,而现在person的prototype指向还是之前的那个Person.prototype,相当于
    //var a = {name:1};   
    //var b=a;  //a和b指向了同一个地址.
    //a={name:2};这里a改变了指向的地址,但是b没有改变,所以b还是指向原来的那个地址.
    //console.log(b.name);//b.name=1;因为    
    console.log('person.name');//li
    Person.prototype.name = 'wang';
    console.log('person.name')//'wang';
```

### 作用域
* [[scope]]作用域链
```js
function a(){
    var glob = 100;
    b();
}
//a defined a.[[scope]] --> 0:GO{}
//a doing   a.[[scope]] --> 0:AO{}
//                          1:GO{}
//b defined b.[[scope]] --> 0:AO{}
//                          1:GO{}
//b doing   b.[[scope]] --> 0:bAO{}
//                          1:AO{}
//                          2:GO{}  
```



- 